package main

import (
	"encoding/json"
	"fmt"
	"log"
	"os"

	"github.com/pkg/errors"
	"gopkg.in/urfave/cli.v1" // imports as package "cli"
)

const (
	cloudProviderGoogle = "google"
	cloudProviderAWS    = "aws"
)

const (
	// VERSION represents the version of the generator tool
	VERSION = "v2.0.0"

	// TFAWSQueueModuleVersion represents the version of the AWS hedwig-queue module
	TFAWSQueueModuleVersion = "1.0.0"

	// TFAWSQueueSubscriptionModuleVersion represents the version of the AWS hedwig-queue-subscription module
	TFAWSQueueSubscriptionModuleVersion = "1.0.0"

	// TFAWSLambdaSubscriptionModuleVersion represents the version of the AWS hedwig-lambda-subscription module
	TFAWSLambdaSubscriptionModuleVersion = "1.0.0"

	// TFAWSTopicModuleVersion represents the version of the AWS hedwig-topic module
	TFAWSTopicModuleVersion = "1.0.0"

	// TFGoogleTopicModuleVersion represents the version of the Google hedwig-topic module
	TFGoogleTopicModuleVersion = "1.0.0"

	// TFGoogleQueueModuleVersion represents the version of the Google hedwig-queue module
	TFGoogleQueueModuleVersion = "1.0.0"

	// TFGoogleSubscriptionModuleVersion represents the version of the Google hedwig-subscription module
	TFGoogleSubscriptionModuleVersion = "1.0.0"

	tfDoNotEditStamp = `// DO NOT EDIT
// This file has been auto-generated by hedwig-terraform-generator ` + VERSION
)

const (
	// alertingFlag represents the cli flag that indicates if alerting should be generated
	alertingFlag = "alerting"

	// awsAccountIDFlag represents the cli flag for aws account id
	awsAccountIDFlag = "aws-account-id"

	// awsRegionFlag represents the cli flag for aws region
	awsRegionFlag = "aws-region"

	// cloudProviderFlag represents the cli flag for cloud provider name
	cloudProviderFlag = "cloud"

	// dlqAlertAlarmActionsFlag represents the cli flag for DLQ alert actions on ALARM
	dlqAlertAlarmActionsFlag = "dlq-alert-alarm-actions"

	// dlqAlertOKActionsFlag represents the cli flag for DLQ alert actions on OK
	dlqAlertOKActionsFlag = "dlq-alert-ok-actions"

	// googleDataFlowTmpGCSLocationFlag represents the cli flag for DataFlow temporary GCS location
	googleDataFlowTmpGCSLocationFlag = "dataflow-tmp-gcs-location"

	// googleDataFlowTemplateGCSPathFlag represents the cli flag for DataFlow template GCS path
	googleDataFlowTemplateGCSPathFlag = "dataflow-template-gcs-path"

	// moduleFlag represents the cli flag for output module name
	moduleFlag = "module"

	// queueAlertAlarmActionsFlag represents the cli flag for DLQ alert actions on ALARM
	queueAlertAlarmActionsFlag = "queue-alert-alarm-actions"

	// queueAlertOKActionsFlag represents the cli flag for DLQ alert actions on OK
	queueAlertOKActionsFlag = "queue-alert-ok-actions"
)

var awsOnlyFlags = []string{
	awsAccountIDFlag,
	awsRegionFlag,
	dlqAlertAlarmActionsFlag,
	dlqAlertOKActionsFlag,
	queueAlertAlarmActionsFlag,
	queueAlertOKActionsFlag,
}

var requiredGoogleFlags = []string{
	googleDataFlowTemplateGCSPathFlag,
	googleDataFlowTmpGCSLocationFlag,
}

func validateArgs(c *cli.Context) *cli.ExitError {
	cloudProvider := c.GlobalString(cloudProviderFlag)
	if cloudProvider == "" {
		return cli.NewExitError(fmt.Sprintf("--%s is required", cloudProviderFlag), 1)
	}
	if cloudProvider != cloudProviderAWS && cloudProvider != cloudProviderGoogle {
		return cli.NewExitError(fmt.Sprintf("invalid cloud provider: %s", cloudProvider), 1)
	}

	if c.NArg() != 1 {
		return cli.NewExitError("<config-file> is required", 1)
	}

	if cloudProvider == cloudProviderAWS {
		alertingFlagsOkay := true
		alertingFlags := []string{
			queueAlertAlarmActionsFlag, queueAlertOKActionsFlag, dlqAlertAlarmActionsFlag, dlqAlertOKActionsFlag}
		if c.Bool(alertingFlag) {
			for _, f := range alertingFlags {
				if !c.IsSet(f) {
					alertingFlagsOkay = false
					msg := fmt.Sprintf("--%s is required", f)
					if _, err := fmt.Fprint(cli.ErrWriter, msg); err != nil {
						return cli.NewExitError(msg, 1)
					}
				}
			}
			if !alertingFlagsOkay {
				return cli.NewExitError("missing required flags for --alerting", 1)
			}
		} else {
			for _, f := range alertingFlags {
				if c.IsSet(f) {
					alertingFlagsOkay = false
					msg := fmt.Sprintf("--%s is disallowed", f)
					if _, err := fmt.Fprint(cli.ErrWriter, msg); err != nil {
						return cli.NewExitError(msg, 1)
					}
				}
			}
			if !alertingFlagsOkay {
				return cli.NewExitError("disallowed flags specified with missing --alerting", 1)
			}
		}
	} else if cloudProvider == cloudProviderGoogle {
		for _, flag := range awsOnlyFlags {
			if c.IsSet(flag) {
				return cli.NewExitError(
					fmt.Sprintf("flag --%s disallowed for provider: %s", flag, cloudProvider),
					1,
				)
			}
		}
		for _, flag := range requiredGoogleFlags {
			if !c.IsSet(flag) {
				return cli.NewExitError(
					fmt.Sprintf("flag --%s is required for provider: %s", flag, cloudProvider),
					1,
				)
			}
		}
	}

	return nil
}

func generateModule(c *cli.Context) error {
	if err := validateArgs(c); err != nil {
		return err
	}

	configFile := c.Args().Get(0)

	config, err := newConfig(c, configFile)
	if err != nil {
		return cli.NewExitError(err, 1)
	}

	writer := newConfigWriter(c, config)
	err = writer.writeTerraform()
	if err != nil {
		return cli.NewExitError(errors.Wrap(err, "failed to generate terraform module"), 1)
	}

	fmt.Println("Created Terraform Hedwig module successfully!")
	return nil
}

func generateConfigFileStructure(c *cli.Context) error {
	cloudProvider := c.GlobalString(cloudProviderFlag)
	if cloudProvider == "" {
		return cli.NewExitError(fmt.Sprintf("--%s is required", cloudProviderFlag), 1)
	}
	if cloudProvider != cloudProviderAWS && cloudProvider != cloudProviderGoogle {
		return cli.NewExitError(fmt.Sprintf("invalid cloud provider: %s", cloudProvider), 1)
	}

	var structure interface{}
	if cloudProvider == cloudProviderAWS {
		structure = AWSConfig{
			Topics: []string{
				"my-topic",
			},
			QueueConsumers: []*AWSQueueConsumer{
				{
					"DEV-MYAPP",
					map[string]string{
						"App": "myapp",
						"Env": "dev",
					},
					[]string{"my-topic"},
				},
			},
			LambdaConsumers: []*AWSLambdaConsumer{
				{
					"arn:aws:lambda:us-west-2:12345:function:my_function:deployed",
					"{optional - this value is inferred from FunctionARN if that's not an interpolated value}",
					"{optional - this value is inferred from FunctionARN if that's not an interpolated value}",
					[]string{"my-topic"},
				},
			},
		}
	} else if cloudProvider == cloudProviderGoogle {
		structure = GoogleConfig{
			Topics: []string{
				"my-topic",
			},
			PullConsumers: []*GooglePullConsumer{
				{
					"dev-myapp",
					[]string{"my-topic"},
					map[string]string{
						"App": "myapp",
						"Env": "dev",
					},
				},
			},
		}
	}
	structureAsJSON, err := json.MarshalIndent(structure, "", "    ")
	if err != nil {
		return cli.NewExitError(err, 1)
	}
	fmt.Println(string(structureAsJSON))
	return nil
}

func runApp(args []string) error {
	cli.VersionFlag = cli.BoolFlag{Name: "version, V"}

	app := cli.NewApp()
	app.Name = "Hedwig Terraform"
	app.Usage = "Manage Terraform configuration for Hedwig apps"
	app.Version = VERSION
	app.HelpName = "hedwig-terraform"
	app.Flags = []cli.Flag{
		cli.StringFlag{
			Name:  cloudProviderFlag,
			Usage: "Cloud provider - either aws or google",
		},
	}
	app.Commands = []cli.Command{
		{
			Name:      "generate",
			Usage:     "Generates Terraform module for Hedwig apps",
			ArgsUsage: "<config-file>",
			Flags: []cli.Flag{
				cli.StringFlag{
					Name:  moduleFlag,
					Usage: "Terraform module name to generate",
					Value: "hedwig",
				},
				cli.BoolFlag{
					Name:  alertingFlag,
					Usage: "Should Cloudwatch alerting be generated? (AWS only)",
				},
				cli.StringSliceFlag{
					Name:  queueAlertAlarmActionsFlag,
					Usage: "Cloudwatch Action ARNs for high message count in queue when in ALARM (AWS only)",
				},
				cli.StringSliceFlag{
					Name:  queueAlertOKActionsFlag,
					Usage: "Cloudwatch Action ARNs for high message count in queue when OK (AWS only)",
				},
				cli.StringSliceFlag{
					Name:  dlqAlertAlarmActionsFlag,
					Usage: "Cloudwatch Action ARNs for high message count in dead-letter queue when in ALARM (AWS only)",
				},
				cli.StringSliceFlag{
					Name:  dlqAlertOKActionsFlag,
					Usage: "Cloudwatch Action ARNs for high message count in dead-letter queue when OK (AWS only)",
				},
				cli.StringFlag{
					Name:  googleDataFlowTmpGCSLocationFlag,
					Usage: "Dataflow tmp GCS location (Google only) (required)",
				},
				cli.StringFlag{
					Name:  googleDataFlowTemplateGCSPathFlag,
					Usage: "Dataflow template GCS location (Google only) (required)",
				},
				cli.StringFlag{
					Name:  awsAccountIDFlag,
					Usage: "AWS Account ID (AWS only)",
				},
				cli.StringFlag{
					Name:  awsRegionFlag,
					Usage: "AWS Region (AWS only)",
				},
			},
			Action: generateModule,
		},
		{
			Name:   "config-file-structure",
			Usage:  "Outputs the structure for config file required for generate command",
			Action: generateConfigFileStructure,
		},
	}

	return app.Run(args)
}

func main() {
	if err := runApp(os.Args); err != nil {
		log.Fatal(err)
	}
}
